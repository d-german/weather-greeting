@startuml
'class Constants <<static>> {
'    + <<const>> OverlandParkKansas : string = "Overland Park Kansas"
'    + <<const>> KansasCityMissouri : string = "Kansas City Missouri"
'    + <<const>> TimeOfDayGreetingMorning : string = "Good morning."
'    + <<const>> TimeOfDayGreetingAfterNoon : string = "Good after noon."
'    + <<const>> TimeOfDayGreetingEvening : string = "Good evening."
'    + <<const>> TemperatureSuggestionCold : string = "You will want to wear a coat."
'    + <<const>> TemperatureSuggestionCool : string = "You will want to wear a light jacket."
'    + <<const>> TemperatureSuggestionHot : string = "It's hot out there, drink plenty of water."
'    + <<const>> TemperatureSuggestionWarm : string = "Have fun."
'    + <<const>> SunscreenSuggestionMedium : string = "Consider wearing sunscreen."
'    + <<const>> SunscreenSuggestionHigh : string = "You definitely should wear sunscreen!"
'}
'class Program <<static>> {
'    - {static} Main() : void
'}
class WeatherGreeting {
    + WeatherGreeting(greetingService:IGreetingService, weatherService:IWeatherService, locationService:ILocationService)
    + TransmitGreeting(location:string, time:DateTime?) : string
    - {static} SunscreenSuggestion(weatherData:WeatherData?, sunscreenSuggestion:string?) : string?
    - {static} TemperatureSuggestion(weatherData:WeatherData?, temperatureSuggestion:string?) : string?
    - {static} TimeOfDayGreeting(weatherData:WeatherData?, timeOfDayGreeting:string?) : string?
}
WeatherGreeting --> "_greetingService" IGreetingService
WeatherGreeting --> "_weatherService" IWeatherService
WeatherGreeting --> "_locationService" ILocationService
class MapPoint {
    + Latitude : double <<get>> <<set>>
    + Longitude : double <<get>> <<set>>
}
class WeatherData {
    + Location : MapPoint? <<get>> <<set>>
    + DateTime : DateTime? <<get>> <<set>>
    + Temperature : double? <<get>> <<set>>
    + Precipitation : double? <<get>> <<set>>
    + Humidity : double? <<get>> <<set>>
    + UvIndex : int? <<get>> <<set>>
}
interface IGreetingService {
    TransmitGreeting(greeting:string) : void
}
class GreetingService {
    - _id : int
    + TransmitGreeting(greeting:string) : void
}
IGreetingService <|-- GreetingService
interface ILocationService {
    GetLocation(location:string) : MapPoint
}
class LocationService {
    + GetLocation(location:string) : MapPoint
}
class "Dictionary`2"<T1,T2> {
}
ILocationService <|-- LocationService
LocationService o-> "_mapPoints<string,MapPoint>" "Dictionary`2"
interface IWeatherService {
    FetchWeatherData(mapPoint:MapPoint, dateTime:DateTime) : WeatherData
}
class WeatherService {
    + FetchWeatherData(mapPoint:MapPoint, dateTime:DateTime) : WeatherData
}
IWeatherService <|-- WeatherService
WeatherService o-> "_randomGenerator" Random
class WeatherServiceCacheDecorator {
    + WeatherServiceCacheDecorator(weatherService:IWeatherService, memoryCache:IMemoryCache)
    + FetchWeatherData(mapPoint:MapPoint, dateTime:DateTime) : WeatherData
}
IWeatherService <|-- WeatherServiceCacheDecorator
WeatherServiceCacheDecorator --> "_weatherServiceDecoratee" IWeatherService
WeatherServiceCacheDecorator --> "_memoryCache" IMemoryCache
WeatherServiceCacheDecorator --> "_cacheEntryOptions" MemoryCacheEntryOptions
abstract class PerformanceServiceBase {
    + {abstract} ElapsedMilliseconds() : long
    + {abstract} Restart() : void
    + <<virtual>> Record(milliseconds:long) : void
}
class PerformanceService {
    + <<override>> ElapsedMilliseconds() : long
    + <<override>> Restart() : void
}
class WeatherServicePerformanceMonitorDecorator {
    + WeatherServicePerformanceMonitorDecorator(weatherServiceDecoratee:IWeatherService, performanceService:PerformanceServiceBase)
    + FetchWeatherData(mapPoint:MapPoint, dateTime:DateTime) : WeatherData
}
PerformanceServiceBase <|-- PerformanceService
PerformanceService o-> "_stopwatch" Stopwatch
IWeatherService <|-- WeatherServicePerformanceMonitorDecorator
WeatherServicePerformanceMonitorDecorator --> "_weatherServiceDecoratee" IWeatherService
WeatherServicePerformanceMonitorDecorator --> "_performanceService" PerformanceServiceBase
@enduml
