@startuml
!theme crt-green

note right of WeatherGreeting::WeatherGreeting
constructor injection
end note

class WeatherGreeting {
    - readonly IGreetingService _greetingService
    - readonly IWeatherService _weatherService
    - readonly ILocationService _locationService
    + WeatherGreeting(IGreetingService greetingService, IWeatherService weatherService, ILocationService locationService)
    + string TransmitGreeting(string location, DateTime? time)
}

interface IGreetingService {
+ void TransmitGreeting(string greeting)
}

interface IWeatherService {
+ WeatherData FetchWeatherData(MapPoint mapPoint, DateTime dateTime)
}

interface ILocationService {
+ MapPoint GetLocation(string location)
}

WeatherGreeting o---> IGreetingService : aggregation
note on link : Aggregation implies a relationship where the child can exist\nindependently of the parent.\nExample: Class (parent) and Student (child).\nDelete the Class and the Students still exist.\nGreetingService can exist separate from WeatherGreeting.
WeatherGreeting o---> IWeatherService : aggregation
WeatherGreeting o---> ILocationService : aggregation

LocationService ...up|> ILocationService
GreetingService ...up|> IGreetingService
WeatherService ...up|> IWeatherService : implements

note "The aggregation arrows are pointing\nin the opposite direction\nof the implementation arrows.\nThis is why its called dependency inversion.  " as N1
WeatherService --right N1
@enduml
